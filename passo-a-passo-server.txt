iniciar o projeto javascript
npm init -y 

instalar typescripte como dev, pois o node n entende typescript
npm i typescript -D

pro typescript "entender" q está num projeto node
npm i @types/node -D

criar arquivo tsconfig.json
npx tsc --init

na linha 14 colocar: 
"target": "es2020",

criar arquivo:
src/server.ts

pra n precisar converter ts pra js na mão
npm i tsx -D

colocar no package.json
"scripts": {
    "dev": "tsx src/server.ts"
},

colocando "watch" fica executando infinitamente e dando reload quando alterar o arquivo
 "scripts": {
    "dev": "tsx watch src/server.ts"
},

instalar fastify pra criar API
npm i fastify

instalar prisma pra DB
npm i prisma -D

dizendo pro prisma q vou usar SQLite, e n o padrão postgres
npx prisma init --datasource-provider SQLite


DEPOIS DE FAZER UMA ALTERAÇÃO NO schema.prisma
pra criar as tabelas:
npx prisma migrate dev

Pra usar o prisma na API
npm i @prisma/client

biblioteca pra fazer a validação do tipo do "id" da memoria q vem no params
npm i zod
pra fazer essa validação cria o squema assim:
const paramsSchema = z.object({
    id: z.string().uuid(),
})
significa q quero garantir q o params sempre tenha um "id" do tipo "string" e q seja um "uuid"

pra escolher quais front end quero deixar q use a API
npm i @fastify/cors

------------- a partir daqui aula 3 -------------
pra poder usar as variaveis de ambiente
npm i dotenv -D

instalar pra fazer requisicoes pra outras APIs
npm i axios